daemon off;
worker_processes auto;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= worker_connections %>;
}

http {
  gzip on;
  gzip_comp_level 6;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any;

  log_format custom_agent '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" "$http_x_original_user_agent"';

  server_tokens off;

  split_clients "${request_uri}_DLP_VERSION" $is_dlp_v2 { 
  <%= dlp_v2_hide_percentage %>%   false;
    *                             true;
  }

<% if logging['access'] %>
  access_log logs/access.log custom_agent;
<% else %>
  access_log off;
<% end %>

<% if debug %>
  error_log stderr debug;
  rewrite_log on;
<% else %>
  error_log stderr <%= logging['error'] %>;
<% end %>

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  server {
    listen <%= port %> default_server;
    server_name _;

    return 301 https://<%= redirect_target %>$request_uri;
  }

  server {
    server_name <%= redirect_target %>;
  	listen <%= port %> reuseport;
    charset <%= encoding %>;
    port_in_redirect off;
    keepalive_timeout 5;
    root <%= root %>;
  <% if error_page %>
    error_page 404 500 /<%= error_page %>;
  <% end %>
  <% if proxies.any? %>
    resolver <%= resolver %>;
  <% end %>

    set $environment <%= environment %>;
    set $url_encoded_colon_slashes %3A%2F%2F;
    set $url_encoded_scheme $scheme$url_encoded_colon_slashes;
    set $neighbor_url $url_encoded_scheme$http_host$request_uri;
    set $rendertron_base <%= rendertron_api_base %>;
    
  <% if basic_auth %>
    auth_basic "Restricted";
    auth_basic_user_file <%= basic_auth_htpasswd_path %>;
  <% end %>

    mruby_post_read_handler /app/bin/config/lib/ngx_mruby/headers.rb cache;

    location / {
      mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;

    <% if clean_urls %>
      try_files $uri.html $uri $uri/ $fallback;
    <% else %>
      try_files $uri $uri/ $fallback;
    <% end %>
    }

  <% if clean_urls %>
    location ~ \.html$ {
      try_files $uri =404;
    }
  <% end %>

  <% if https_only %>
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }
  <% end %>

  # Redirect /links/x/state to /x/state
  location ~ ^/links/(.*){
    return 301 https://$host/$1;
  }
  
  location ~ ^/.well-known/ {
    try_files $uri @s3;
  }
  
  location ~ ^/static/ {
    try_files $uri @s3;
  }
  
  location ~ ^/assets/ {
    try_files /public/$uri @s3;
  }

  location @s3 {
    proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/frontend$uri;
  }

  location ~ ^\/sitemap.[A-Za-z_]*.xml$ {
    proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/sitemaps$request_uri;
  }

  location ~ \.xml$|\.txt$ {
    # bypass rendertron
    try_files $uri =404;
  }

  # insert a slash between /storage-blog/ and the article names
  location ~ \/storage-blog([^\/].*) {
    return 301 https://www.neighbor.com/storage-blog/$1;
  }

  location ~ \/rentals\/[A-z\-]*--[A-z\-]*-self-storage-space--[0-9]*$ {
    return 404;
  }

  <% if listing_routing_version == '2' %>
    location ~ \/rentals\/[A-z\-']*--[A-z\-']*-self-storage-space-[0-9]*$ {
      mruby_set $listing_path /app/bin/config/lib/ngx_mruby/listing_path.rb cache;
      return 301 https://$host/listings/$listing_path;
    }
  <% end %>

  location @proxy_fallback {
    mruby_set $path /app/bin/config/lib/ngx_mruby/routes_path.rb cache;
    mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;
    add_header x-is-proxy-fallback "true";

    if ($http_x_should_prerender) {
      proxy_pass $rendertron_base$neighbor_url;
      break;
    }

    try_files $uri $path $fallback =200;
  }
  <% if canonical_host %>
    if ($host != <%= canonical_host %>) {
      return 301 $http_x_forwarded_proto://<%= canonical_host %>$request_uri;
    }
  <% end %>

  <% routes.each do |route, path| %>
  location ~ ^<%= route %>$ {
    set $route <%= route %>;
    mruby_set $path /app/bin/config/lib/ngx_mruby/routes_path.rb cache;
    mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;

    error_page 404 =200 @proxy_fallback;

    # Only proxy to prerendered page if:
    # 1. There is not a neighbor rendertron header
    # 2. The $request_uri has some kind of /:city--:state-:suffix (no numbers) match
    set $static_render_condition "${http_x_neighbor_rendertron}---${request_uri}";
    proxy_intercept_errors on;

    # this proxies the request to the prerendered dlp bucket folder if it is not a rendertron request and the URL is DLP-like
    if ($static_render_condition ~ ^---\/[A-Z][a-zA-Z\-]*--[A-Z][a-zA-Z\-\/]*$) {
      proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/prerendered$request_uri;
      break;
    }

    # this proxies the specified URLs requests to the dlp bucket folder if they are not a rendertron request
    if ($static_render_condition ~ ^---(<%= pathsToProxyToPrerenderedS3.join('|') %>)$) {
      proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/prerendered$request_uri;
      break;
    }

    # this proxies the request to the live render service
    if ($http_x_should_prerender) {
      proxy_pass $rendertron_base$neighbor_url;
      break;
    }
    
    # if it is a rendertron request, on the dlp v2 arm, and has a DLP-like URL, then redirect rendertron with query param
    set $dlp_v2_test_condition "${args}---${http_x_neighbor_rendertron}---${is_dlp_v2}---${request_uri}";
    if ($dlp_v2_test_condition ~ ^---v[0-9]*---true---\/[A-Z][a-zA-Z\-]*--[A-Z][a-zA-Z\-\/]*$) {
      return 302 "${request_uri}?v=2";
    }

  <% if clean_urls %>
    try_files $uri.html $uri $uri/ $path $fallback;
  <% else %>
    try_files $uri $path $fallback;
  <% end %>
  }
  <% end %>

  # need this b/c setting $fallback to =404 will try #{root}=404 instead of returning a 404
  location @404 {
    return 404;
  }

  # fallback proxy named match
  <% proxies.each do |location, hash| %>
    set $<%= hash['name'] %> <%= hash['host'] %>;
    location @<%= location %> {
      rewrite ^<%= location %>/?(.*)$ <%= hash['path'] %>/$1 break;
      # can reuse variable set above
      proxy_pass $<%= hash['name'] %>;
      proxy_ssl_server_name on;
      <% hash['hide_headers'].each do |header_name|%>
      proxy_hide_header <%= header_name %>;
      <% end %>
      <% %w(http https).each do |scheme| %>
      proxy_redirect <%= hash["redirect_#{scheme}"] %> <%= location %>;
      <% end %>
    }
  <% end %>

  # fallback redirects named match
  <% redirects.each do |path, hash| %>
    location @<%= path %> {
      return <%= hash['status'] || 301 %> <%= hash['url'] %>;
    }
  <% end %>

    location = "/rentals/search/New York City, NY, USA" {
      return 301 https://www.neighbor.com/New-York--New-York-self-storage;
    }

  }
}
