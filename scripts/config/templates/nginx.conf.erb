daemon off;
worker_processes auto;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= worker_connections %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any;

  server_tokens off;

  access_log  logs/access.log;
<% if debug %>
  error_log stderr debug;
  rewrite_log on;
<% else %>
  error_log   stderr;
<% end %>

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  server {
    listen <%= port %> reuseport;
    port_in_redirect off;
    keepalive_timeout 5;
    root <%= root %>;
  <% if error_page %>
    error_page 404 500 /<%= error_page %>;
  <% end %>

  <% if clean_urls %>
    location / {
      mruby_post_read_handler /app/bin/config/lib/ngx_mruby/headers.rb cache;
      try_files $uri $uri/ $uri.html;
    }

    location ~ \.html$ {
      try_files $uri =404;
    }
  <% else %>
    location / {
      mruby_post_read_handler /app/bin/config/lib/ngx_mruby/headers.rb cache;
    }
  <% end %>

  <% if https_only %>
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$uri;
    }
  <% end %>

  <% redirects.each do |path, hash| %>
    location <%= path %> {
      return <%= hash['status'] || 301 %> <%= hash['url'] %>;
    }
  <% end %>

  <% routes.each do |route, path| %>
    location ~ ^<%= route %>$ {
      set $route <%= route %>;
      mruby_set $path /app/bin/config/lib/ngx_mruby/routes_path.rb cache;
      mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;
      try_files $path $fallback;
    }
  <% end %>

  <% if routes.any? %>
    # need this b/c setting $fallback to =404 will try #{root}=404 instead of returning a 404
    location @404 {
      return 404;
    }
  <% end %>

  <% if routes.any? %>
    <% proxies.each do |location, hash| %>
      location @<%= location %> {
        rewrite ^<%= location %>(.*)$ <%= hash['path'] %>/$1 break;
        proxy_pass <%= hash['host'] %>;
      }
    <% end %>
  <% end %>

  <% proxies.each do |location, hash| %>
    location <%= location %> {
      proxy_pass <%= hash['origin'] %>;
    }
  <% end %>
  }
}
