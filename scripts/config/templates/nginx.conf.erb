daemon off;
worker_processes auto;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= worker_connections %>;
}

http {
  gzip on;
  gzip_comp_level 6;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any;

  log_format custom_agent  'network.client.ip=$remote_addr network.client.ip_forward_chain=$http_x_forwarded_for timestamp=$time_iso8601 log_source="nginx" '
                           'http.method=$request_method http.url="$request_uri" http.status_code=$status network.bytes_written=$body_bytes_sent http.request_id=$http_x_request_id '
                           'referrer="$http_referer" http.user_agent="$http_user_agent" http.downstream_user_agent="$http_x_original_user_agent" '
                           'duration=$request_time upstream_duration=$upstream_response_time';

  server_tokens off;

  split_clients "${request_uri}_DLP_VERSION" $is_dlp_v2 {
  <%= dlp_v2_hide_percentage %>%   false;
    *                             true;
  }

<% if logging['access'] %>
  access_log logs/access.log custom_agent;
<% else %>
  access_log off;
<% end %>

<% if debug %>
  error_log stderr debug;
  rewrite_log on;
<% else %>
  error_log stderr <%= logging['error'] %>;
<% end %>

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  server {
    listen <%= port %> default_server;
    server_name _;

    return 301 https://<%= redirect_target %>$request_uri;
  }

  server {
    server_name <%= redirect_target %>;
  	listen <%= port %> reuseport;
    charset <%= encoding %>;
    port_in_redirect off;
    keepalive_timeout 5;
    root <%= root %>;
  <% if error_page %>
    error_page 404 500 /<%= error_page %>;
  <% end %>
  <% if proxies.any? %>
    resolver <%= resolver %>;
  <% end %>

    set $environment <%= environment %>;
    set $url_encoded_colon_slashes %3A%2F%2F;
    set $url_encoded_scheme $scheme$url_encoded_colon_slashes;
    set $neighbor_url $url_encoded_scheme$http_host$request_uri;
    set $rendertron_base <%= rendertron_api_base %>;

  <% if basic_auth %>
    auth_basic "Restricted";
    auth_basic_user_file <%= basic_auth_htpasswd_path %>;
  <% end %>

    mruby_post_read_handler /app/bin/config/lib/ngx_mruby/headers.rb cache;

    location / {
      mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;

    <% if clean_urls %>
      try_files $uri.html $uri $uri/ $fallback;
    <% else %>
      try_files $uri $uri/ $fallback;
    <% end %>
    }

  <% if clean_urls %>
    location ~ \.html$ {
      try_files $uri =404;
    }
  <% end %>

  <% if https_only %>
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }
  <% end %>

  rewrite ^/embed/(.*)$ /$1.html last;

  location ~ ^/(((?!storage-blog).)*)/$ {
    return 301 $scheme://$http_host/$1;
  }

  # Redirect /links/x/state to /x/state
  location ~ ^/links/(.*){
    return 301 https://$host/$1;
  }

  location ~ ^/.well-known/ {
    try_files $uri @s3;
  }

  location ~ ^/static/ {
    try_files $uri @s3;
  }

  location ~ ^/assets/ {
    try_files $uri @s3;
  }

  location @s3 {
    proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/frontend$uri;
  }

  location ~ ^\/sitemap.[A-Za-z_]*.xml$ {
    proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/sitemaps$request_uri;
  }

  location ~ ^\/v[0-9]*/sitemap.[A-Za-z_]*.xml$ {
    proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/sitemaps$request_uri;
  }

  location ~* ^/[^/]+\.(?:png|ico|txt|xml|json|svg|webmanifest)$ {
    try_files $uri @s3;
  }

  # insert a slash between /storage-blog/ and the article names
  location ~ \/storage-blog([^\/].*) {
    return 301 https://www.neighbor.com/storage-blog/$1;
  }

  location ~ \/rentals\/[A-z\-]*--[A-z\-]*-self-storage-space--[0-9]*$ {
    return 404;
  }

  location ^~ /storage-blog {
    <% if environment == 'staging' || environment == 'development'%>
      proxy_pass                          https://staging-newstorageblog.kinsta.cloud;
    <% else %>
      proxy_pass                          https://newstorageblog.kinsta.cloud;
    <% end %>

    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_hide_header X-Robots-Tag;  
  }

  # Redirect dlp urls with uppercase cities or states to lowercase or urls with spaces or %20 symbols to proper location
  location ~ "(*UTF8)^\/[A-z0-9-]*-near-me(\/[a-z]*)?\/[A-Z][A-z| |\-|%20]*\/[A-Z][A-z| |\-|%20]*$" {
    mruby_set $dlp_path /app/bin/config/lib/ngx_mruby/dlp_redirect_path.rb cache;
    return 301 https://$host/$dlp_path$is_args$args;
  }

  # Redirect our locations pages with abbr state to full state name
  location ~ "(*UTF8)^\/locations\/[A-z][A-z]\/[A-z\-\/]*$" {
    mruby_set $locations_path /app/bin/config/lib/ngx_mruby/locations_state_path.rb cache;
    return 301 https://$host/$locations_path$is_args$args;
  }

  # Redirect our listings pages to the new url structure
  location ~ "(*UTF8)^\/listings\/[A-z0-9\-]*\/[A-z0-9\-]*\/[0-9]*$" {
    mruby_set $listing_path /app/bin/config/lib/ngx_mruby/listing_redirect_path.rb cache;
    proxy_pass https://url-proxy.<%= environment == "production" ? "production" : "staging" %>.neighbor.com/listings/$host/$listing_path$is_args$args;
  }

  # Redirect our discover pages to the new url structure
  location ~ "(*UTF8)^\/discover\/[A-z\-\/]*$" {
    mruby_set $discover_path /app/bin/config/lib/ngx_mruby/discover_path.rb cache;
    return 301 https://$host/$discover_path$is_args$args;
  }

  # Redirect our locations dlp pages with trailing slash in CITY AND STATE to non-trailing slash version: https://www.neighbor.com/locations/texas-/san-antonio-/self-storage to https://www.neighbor.com/locations/texas/san-antonio/self-storage
  location ~ "(*UTF8)^\/locations\/([A-z\-\p{L}'%]*)\-+\/([A-z\-\p{L}'%]*)\-+\/([A-z\-\p{L}'%]*)$" {
    return 301 https://$host/$3-near-me/$1/$2$is_args$args;
  }

  # Redirect our locations dlp pages with trailing slash in STATE to non-trailing slash version: https://www.neighbor.com/locations/texas-/san-antonio/self-storage to https://www.neighbor.com/locations/texas/san-antonio/self-storage
  location ~ "(*UTF8)^\/locations\/([A-z\-\p{L}'%]*)\-+\/([A-z\-\p{L}'%]*[^-])\/([A-z\-\p{L}'%]*)$" {
    return 301 https://$host/$3-near-me/$1/$2$is_args$args;
  }

  # Redirect our locations dlp pages with trailing slash in CITY to non-trailing slash version: https://www.neighbor.com/locations/texas/san-antonio-/self-storage to https://www.neighbor.com/locations/texas/san-antonio/self-storage
  location ~ "(*UTF8)^\/locations\/([A-z\-\p{L}'%]*[^-])\/([A-z\-\p{L}'%]*)\-+\/([A-z\-\p{L}'%]*)$" {
    return 301 https://$host/$3-near-me/$1/$2$is_args$args;
  }

  # Redirect our locations pages to the new url structure
  location ~ "(*UTF8)^\/locations\/([A-z\-\p{L}'%]*)+\/([A-z\-\p{L}'%]*)+\/([A-z\/\-\p{L}'%]*)$" {
    mruby_set $locations_path /app/bin/config/lib/ngx_mruby/locations_redirect_path.rb cache;
    return 301 https://$host/$locations_path$is_args$args;
  }

  # Redirect our locations regions to the new url structure
  location ~ "(*UTF8)^\/((regions)/.*)" {
    mruby_set $regions_path /app/bin/config/lib/ngx_mruby/regions_redirect_path.rb cache;
    return 301 https://$host/$regions_path$is_args$args;
  }

  <% if listing_routing_version == '2' %>
    # Redirect our listing detail pages to the new url structure
    location ~ "(*UTF8)^\/rentals\/[A-z0-9\-\p{L}'%]*--[A-z0-9\-\p{L}'%]*-self-storage-space-[0-9]+$" {
      mruby_set $listing_path /app/bin/config/lib/ngx_mruby/listing_path.rb cache;
      proxy_pass https://url-proxy.<%= environment == "production" ? "production" : "staging" %>.neighbor.com/listings/$host/$listing_path$is_args$args;
    }

    # Redirect for double dashed dlp pages. Must be above the regions since the slash is optional
    location ~ "(*UTF8)^\/[A-z0-9\-\p{L}'%]*--[A-z0-9\-\p{L}'%]*--([A-z\-]*)\/*[A-z]*$" {
      mruby_set $locations_path /app/bin/config/lib/ngx_mruby/locations_double_path.rb cache;
      return 301 https://$host/$locations_path$is_args$args;
    }

    # Redirect our state topic pages with storage and parking in the name to the new url structure
    location ~ "(*UTF8)^\/(?!fleet)[A-z\-]*(-storage|-parking)\/[A-z0-9\-\p{L}'%]+$" {
      mruby_set $regions_path /app/bin/config/lib/ngx_mruby/regions_path.rb cache;
      return 301 https://$host/$regions_path$is_args$args;
    }

    # Redirect our garage and parking spaces state topic pages to the new url structure
    location ~ "(*UTF8)^\/(garages|parking-spaces)\/([A-z0-9\-\p{L}'%]+)$" {
      return 301 https://$host/$1-near-me/$2$is_args$args;
    }

    # Redirect for single dash dlps
    location ~* "(*UTF8)^\/[A-z0-9\-\p{L}'%]*--[A-z0-9\-\p{L}'%]*-(garages|parking-spaces|long-term-parking|monthly-parking|self-storage|driveway-parking)$" {
      mruby_set $locations_path /app/bin/config/lib/ngx_mruby/locations_single_path.rb cache;
      return 301 https://$host/$locations_path$is_args$args;
    }
  <% end %>

  # The /build directory is also needed because that's where the server-rendered JS comes from
  # Redirect location DLPs to server-side rendered frontend
  location ~ ^/(college-storage-near-me)\/([A-z\-]+)\/([A-z\-]+)\/([A-z\-]+)$ {
    return 301 https://$host/$1/$2/$3$is_args$args;
  }

  # Redirect fleet-storage-near-me and fleet-parking-near-me DLPs to SSR fleet parking landing page
  location ~ ^/fleet-(storage|parking)-near-me(.*) {
    return 301 https://$host/business/fleet-parking$is_args$args;
  }

  # redirect DLPs with abbreviated state name to full state name
  location ~ ^/(([0-9A-z\-]*)-near-me\/((indoor|outdoor|covered)\/)?((?!(indoor|outdoor|covered))[A-z][A-z])\/([A-z\-]+)$) {
    mruby_set $dlp_path /app/bin/config/lib/ngx_mruby/dlp_state_path.rb cache;
    return 301 https://$host/$dlp_path$is_args$args;
  }

  # Redirect deprecated DLP subtypes to their main type

  # Current deprecated subtypes are all truck storage subtypes, which should redirect to their parent type
	location ~ ^/truck-storage-near-me/(indoor|outdoor|covered)(.*) {
    return 301 https://$host/truck-parking-near-me$2$is_args$args;
  }

  # Redirect deprecated DLP types to the more useful type
  # Start of deprecated DLP types redirection
  location ~ ^/(college|long-term)-storage-near-me(.*) {
    return 301 https://$host/self-storage-near-me$2$is_args$args;
  }

  location ~ ^/driveway-parking-near-me(.*) {
    return 301 https://$host/parking-spaces-near-me$1$is_args$args;
  }

  location ~ ^/truck-storage-near-me(.*) {
    return 301 https://$host/truck-parking-near-me$1$is_args$args;
  }

  location ~ ^/trailer-storage-near-me(.*) {
    return 301 https://$host/rv-storage-near-me$1$is_args$args;
  }

  # redirect warehouse storage dlps to the new commercial warehouse storage cms page
  location ~ ^/warehouse-storage-near-me(.*) {
    return 301 https://www.neighbor.com/business/warehouse-storage$is_args$args;
  }
  # redirect business storage dlps to the new commercial warehouse storage cms page
  location ~ ^/business-storage-near-me(.*) {
    return 301 https://www.neighbor.com/business/business-commercial-storage$is_args$args;
  }
  #End of deprecated DLP types redirection

  # Redirect build directory to server-side rendered frontend to get JS files
  location ~ ^/((build)/.*) {
    proxy_pass <%= ssr_frontend_host %>/$1$is_args$args;
  }

  # redirect discover pages with abbreviated state name to full state name
  location ~ ^/(([0-9A-z\-]*)-near-me\/((indoor|outdoor|covered)\/)?((?!(indoor|outdoor|covered))[A-z][A-z])(\/[A-z\-]*)*$) {
    mruby_set $discover_path /app/bin/config/lib/ngx_mruby/discover_state_path.rb cache;
    return 301 https://$host/$discover_path$is_args$args;
  }

	# redirect any near me pages with invalid characters to the corrected url
	location ~ ^/((?!storage-units)[0-9A-z-]+-near-me\/.*[A-Z\+\ ].*$) {
		mruby_set $discover_path /app/bin/config/lib/ngx_mruby/discover_state_path.rb cache;
		return 301 https://$host/$discover_path$is_args$args;
	}

  # redirect all near-me pages to SSR frontend
  location ~ /((?!storage-units)[0-9A-z-]+-near-me(\/[A-z-]*)*$) {
    proxy_pass <%= ssr_frontend_host %>/$1$is_args$args;
  }

  location = "/commercial/turo-vehicle-parking" {
    return 301 https://www.neighbor.com/business/turo-fleet-car-parking;
  }

  location = "/business/turo-vehicle-parking" {
    return 301 https://www.neighbor.com/business/turo-fleet-car-parking;
  }

  # redirect all business, facility, location, and storage pages to ssr-frontend
  location ~ ^/(facility|location|storage|business)\/(.*) {
    proxy_pass <%= ssr_frontend_host %>/$1/$2$is_args$args;
  }

  # redirect deprecated commercial pages to new business directory
  location ~ ^/commercial/(.*) {
    return 301 https://$host/business/$1$is_args$args;
  }

  location @proxy_fallback {
    mruby_set $path /app/bin/config/lib/ngx_mruby/routes_path.rb cache;
    mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;
    add_header x-is-proxy-fallback "true";

    try_files $uri $path $fallback =200;
  }
  <% if canonical_host %>
    if ($host != <%= canonical_host %>) {
      return 301 $http_x_forwarded_proto://<%= canonical_host %>$request_uri;
    }
  <% end %>

  <% routes.each do |route, path| %>
  location ~ ^<%= route %>$ {
    set $route <%= route %>;
    mruby_set $path /app/bin/config/lib/ngx_mruby/routes_path.rb cache;
    mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;

    error_page 404 =200 @proxy_fallback;

    # Only proxy to prerendered page if:
    # 1. There is not a neighbor rendertron header
    # 2. The $request_uri has some kind of /:city--:state-:suffix (no numbers) match
    set $static_render_condition "${http_x_neighbor_rendertron}---${uri}";
    proxy_intercept_errors on;

    # this proxies the request to the prerendered dlp bucket folder if it is not a rendertron request and the URL is DLP-like
    if ($static_render_condition ~ ^---\/[A-Z][a-zA-Z\-]*--[A-Z][a-zA-Z\-\/]*$) {
      proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/prerendered$request_uri;
      break;
    }

    # this proxies the request to the v2 prerendered dlp bucket folder if it is not a rendertron request and the URL is DLP-like
    if ($static_render_condition ~ "(*UTF8)^---\/locations\/[A-z\-\p{L}'%\/]*$") {
      proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/prerendered$request_uri;
      break;
    }

    # this proxies the specified URLs requests to the dlp bucket folder if they are not a rendertron request
    if ($static_render_condition ~ ^---(<%= pathsToProxyToPrerenderedS3.join('|') %>)$) {
      proxy_pass https://s3.amazonaws.com/neighbor-build-${environment}/prerendered$request_uri;
      break;
    }

    # if it is a rendertron request, on the dlp v2 arm, and has a DLP-like URL, then redirect rendertron with query param
    set $dlp_v2_test_condition "${args}---${http_x_neighbor_rendertron}---${is_dlp_v2}---${request_uri}";
    if ($dlp_v2_test_condition ~ ^---v[0-9]*---true---\/[A-Z][a-zA-Z\-]*--[A-Z][a-zA-Z\-\/]*$) {
      return 302 "${request_uri}?v=2";
    }

    if ($dlp_v2_test_condition ~ "(*UTF8)^---v[0-9]*---true---\/locations\/[A-z\-\p{L}'%\/]*$") {
      return 302 "${request_uri}?v=2";
    }

  <% if clean_urls %>
    try_files $uri.html $uri $uri/ $path $fallback;
  <% else %>
    try_files $uri $path $fallback;
  <% end %>
  }
  <% end %>

  # need this b/c setting $fallback to =404 will try #{root}=404 instead of returning a 404
  location @404 {
    return 404;
  }

  # fallback proxy named match
  <% proxies.each do |location, hash| %>
    set $<%= hash['name'] %> <%= hash['host'] %>;
    location @<%= location %> {
      rewrite ^<%= location %>/?(.*)$ <%= hash['path'] %>/$1 break;
      # can reuse variable set above
      proxy_pass $<%= hash['name'] %>;
      proxy_ssl_server_name on;
      <% hash['hide_headers'].each do |header_name|%>
      proxy_hide_header <%= header_name %>;
      <% end %>
      <% %w(http https).each do |scheme| %>
      proxy_redirect <%= hash["redirect_#{scheme}"] %> <%= location %>;
      <% end %>
    }
  <% end %>

  # fallback redirects named match
  <% redirects.each do |path, hash| %>
    location @<%= path %> {
      return <%= hash['status'] || 301 %> <%= hash['url'] %>;
    }
  <% end %>

    location = "/CHARGE" {
      return 301 https://help.neighbor.com/why-did-neighbor-charge-my-credit-card-B1quv0LRd;
    }

    location = "/rentals/search/New York City, NY, USA" {
      return 301 https://www.neighbor.com/New-York--New-York-self-storage;
    }

  }
}
